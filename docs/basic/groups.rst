
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "basic/groups.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_basic_groups.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_basic_groups.py:


Generator groups
================

This example demonstrates how generators can be grouped.  Groups provide a
layered namespace for outputs.  This is useful if similar generators are run
for different populations of objects, since it removes the need to manually
change input and output names.

.. GENERATED FROM PYTHON SOURCE LINES 13-18

Setup
-----
The simplest galaxies-only GLASS simulation, sampling galaxies uniformly over
the sphere using some redshift distribution.  Galaxies are sampled in two
groups: low and high redshifts.

.. GENERATED FROM PYTHON SOURCE LINES 18-60

.. code-block:: default


    import numpy as np
    import matplotlib.pyplot as plt

    # import everything in the glass namespace
    import glass.all
    import glass


    # basic parameters of the simulation
    nside = 128
    lmax = nside

    # galaxy density
    n_arcmin2 = 1e-4

    # set up the matter shell boundaries
    shells = glass.matter.redshift_shells(0., 3., dz=0.25)

    # parametric galaxy redshift distribution: one for low-z, one for high-z
    z = np.linspace(0, 3, 301)
    dndz_low = n_arcmin2*glass.observations.smail_nz(z, 0.5, 1.0, 2.5)
    dndz_high = n_arcmin2*glass.observations.smail_nz(z, 2.0, 4.0, 2.5)

    # compute galaxy densities from dndz
    dens_low = glass.galaxies.densities_from_dndz(z, dndz_low, shells)
    dens_high = glass.galaxies.densities_from_dndz(z, dndz_high, shells)

    # generators for a uniform galaxies simulation in two groups
    # we need to sample positions because that Poisson-samples the galaxy number
    generators = [
        glass.core.group('low-z', [
            glass.galaxies.gen_uniform_positions(dens_low),
            glass.galaxies.gen_redshifts_from_nz(z, dndz_low, shells),
        ]),
        glass.core.group('high-z', [
            glass.galaxies.gen_uniform_positions(dens_high),
            glass.galaxies.gen_redshifts_from_nz(z, dndz_high, shells),
        ]),
    ]









.. GENERATED FROM PYTHON SOURCE LINES 61-65

Simulation
----------
Keep the simulated redshifts of both populations.  Note how the groups provide
a nested namespace for the data.

.. GENERATED FROM PYTHON SOURCE LINES 65-76

.. code-block:: default


    # arrays for true (ztrue) and photmetric (zphot) redshifts
    low_z = np.empty(0)
    high_z = np.empty(0)

    # simulate and add galaxies in each matter shell to arrays
    for shell in glass.core.generate(generators):
        low_z = np.append(low_z, shell['low-z'][glass.galaxies.GAL_Z])
        high_z = np.append(high_z, shell['high-z'][glass.galaxies.GAL_Z])









.. GENERATED FROM PYTHON SOURCE LINES 77-80

Plots
-----
Plot the two distributions together with the expected inputs.

.. GENERATED FROM PYTHON SOURCE LINES 80-90

.. code-block:: default


    norm = glass.util.ARCMIN2_SPHERE*(z[-1] - z[0])/40

    for zz, nz, label in (low_z, dndz_low, 'low-z'), (high_z, dndz_high, 'high-z'):
        plt.hist(zz, bins=40, range=(z[0], z[-1]), histtype='stepfilled', alpha=0.5, label=label)
        plt.plot(z, norm*nz, '-k', lw=1, alpha=0.5)
    plt.xlabel('redshift $z$')
    plt.ylabel('number of galaxies')
    plt.legend()
    plt.show()



.. image-sg:: /basic/images/sphx_glr_groups_001.png
   :alt: groups
   :srcset: /basic/images/sphx_glr_groups_001.png, /basic/images/sphx_glr_groups_001_2_0x.png 2.0x
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.308 seconds)


.. _sphx_glr_download_basic_groups.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: groups.py <groups.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: groups.ipynb <groups.ipynb>`
